// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;


import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;

    ShuffleboardTab driveTab;
    ShuffleboardTab armTab;
    ShuffleboardTab intakeTab;
    ShuffleboardTab fieldTab;
    ShuffleboardTab generalTab;
    Timer timer = new Timer();
    double autoTime = 15;
    double teleopTime = 215;


    Field2d field;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
        // autonomous chooser on the dashboard.
        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);

        // init_tabs();
    }

    /**
    * This function is called every robot packet, no matter the mode. Use this for items like
    * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
    *
    * <p>This runs after the mode specific periodic functions, but before
    * LiveWindow and SmartDashboard integrated updating.
    */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
        // commands, running already-scheduled commands, removing finished or interrupted commands,
        // and running subsystem periodic() methods.  This must be called from the robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();
        // updateFieldTab();
    }


    /**
    * This function is called once each time the robot enters Disabled mode.
    */
    @Override
    public void disabledInit() {
    }

    @Override
    public void disabledPeriodic() {
    }

    /**
    * This autonomous runs the autonomous command selected by your {@link RobotContainer} class.
    */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }
        timer.restart();
    }

    /**
    * This function is called periodically during autonomous.
    */
    @Override
    public void autonomousPeriodic() {
        autoTime = 15 - timer.get();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }
        timer.restart();
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
        teleopTime = 215 - timer.get();
    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
    * This function is called periodically during test mode.
    */
    @Override
    public void testPeriodic() {
    }


    // public void init_tabs(){
    //     fieldTab = Shuffleboard.getTab("Field");
    //     field = new Field2d();
    //     fieldTab.add("Field", field).
    //     withPosition(0, 0).withSize(6, 4).
    //     withWidget(BuiltInWidgets.kField);

    //     generalTab = Shuffleboard.getTab("General");
    //     generalTab.addNumber("Auto time", () -> autoTime)
    //     .withPosition(3, 0).withSize(3, 2)
    //     .withWidget(BuiltInWidgets.kNumberBar).withProperties(Map.of("min", 0, "max", 15));
    //     generalTab.addNumber("Teleop time", () -> teleopTime)
    //     .withPosition(0, 0).withSize(3, 2)
    //     .withWidget(BuiltInWidgets.kNumberBar).withProperties(Map.of("min", 0, "max", 215));

        

    //     driveTab = Shuffleboard.getTab("Drive");
    //     driveTab.addNumber("Yaw", () -> m_robotContainer.mDriveSubsystem.getHeading()).
    //     withPosition(0, 0).
    //     withSize(2, 2).
    //     withWidget(BuiltInWidgets.kGyro);

    //     driveTab.addNumber("left encoder", () -> m_robotContainer.mDriveSubsystem.getLeftEncoder().getPosition()).
    //     withPosition(0, 0).
    //     withSize(2, 2).
    //     withWidget(BuiltInWidgets.kDial);
        
    //     driveTab.addNumber("right encoder", () -> m_robotContainer.mDriveSubsystem.getRightEncoder().getPosition()).
    //     withPosition(0, 0).
    //     withSize(2, 2).
    //     withWidget(BuiltInWidgets.kDial);




    //     armTab = Shuffleboard.getTab("Arm");

    //     armTab.addDouble("arm encoder", () -> m_robotContainer.mLiftSubsystem.getEncoderPosition()).
    //     withPosition(0, 0).
    //     withSize(3, 3).
    //     withWidget(BuiltInWidgets.kDial)
    //     .withProperties(Map.of("min", 0, "max", 67));

    //     armTab.addBoolean("Fold switch", m_robotContainer.mLiftSubsystem::isFoldSwitchPressed).
    //     withPosition(3, 0).
    //     withSize(2, 2).
    //     withWidget(BuiltInWidgets.kBooleanBox);

    //     armTab.addBoolean("ground switch", m_robotContainer.mLiftSubsystem::isGroundSwitchPressed).
    //     withPosition(5, 0).
    //     withSize(2, 2).
    //     withWidget(BuiltInWidgets.kBooleanBox);

    //     armTab.addDouble("aplied output", () -> m_robotContainer.mLiftSubsystem.getMotor().getAppliedOutput()).
    //     withPosition(2, 3).
    //     withSize(1, 1).
    //     withWidget(BuiltInWidgets.kDial)
    //     .withProperties(Map.of("min", -1, "max", 1));
        
    //     intakeTab = Shuffleboard.getTab("Intake");
    // }

    // public void updateFieldTab(){
    //     field.setRobotPose(m_robotContainer.mDriveSubsystem.getPose());
    // }


}